{"version":3,"sources":["state/global/global.selectors.tsx","state/entities/cryptocurrencies/cryptocurrencies.selectors.tsx","components/CryptocurrencyDetailsPage/CryptocurrencyDetailsPage.tsx","components/SettingsPage/SettingsPage.tsx","components/HomePage/CurrenciesTable/CurrenciesTableRow/CurrenciesTableRow.tsx","components/HomePage/CurrenciesTable/CurrenciesTable.tsx","components/HomePage/HomePage.tsx"],"names":["__webpack_require__","d","__webpack_exports__","getCurrentFlatCurrency","state","global","currentFlatCurrency","getTopCryptocurrenciesSelector","makeGetCryptocurrencySelector","getBitcoinSelector","reselect__WEBPACK_IMPORTED_MODULE_0__","lodash__WEBPACK_IMPORTED_MODULE_1__","state_global_global_selectors__WEBPACK_IMPORTED_MODULE_2__","createSelector","entities","cryptocurrencies","items","top","topCryptocurrencies","flatCurrency","map","currencyId","filter","currency","Boolean","quote","getCryptocurrencyId","cryptocurrencyId","_","find","e","id","symbol","CryptocurrencyDetailsPage","_BaseComponent","_getPrototypeOf2","_this","Object","_home_feimosi_Projects_povio_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_len","arguments","length","args","Array","_key","_home_feimosi_Projects_povio_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_home_feimosi_Projects_povio_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","apply","concat","refreshData","_this$props","props","match","Number","parseInt","params","actions","fetchCryptocurrency","_home_feimosi_Projects_povio_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__","_home_feimosi_Projects_povio_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__","key","value","_this$props2","cryptocurrency","bitcoin","react__WEBPACK_IMPORTED_MODULE_6__","common_PageLoadingBar__WEBPACK_IMPORTED_MODULE_12__","price","toFixed","className","name","cmcRank","toLocaleString","volume24h","marketCap","percentChange1h","percentChange24h","percentChange7d","circulatingSupply","totalSupply","common_Button__WEBPACK_IMPORTED_MODULE_11__","to","theme","onClick","BaseComponent","withRouter","connect","getCryptocurrency","_state","dispatch","_home_feimosi_Projects_povio_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","bindActionCreators","cryptocurrenciesActions","SettingsPage","handleCurrencyChange","newCurrency","changeFlatCurrency","react_radio_group__WEBPACK_IMPORTED_MODULE_9__","selectedValue","onChange","FlatCurrency","USD","htmlFor","common_Img__WEBPACK_IMPORTED_MODULE_12__","src","EUR","CNY","defaultProps","globalActions","CurrenciesTableRow","_PureBaseComponent","classCallCheck","possibleConstructorReturn","getPrototypeOf","handleClick","history","push","inherits","createClass","index","toString","replace","react","tabIndex","role","PureBaseComponent","CurrenciesTable","currencies","sort","a","b","CurrenciesTable_CurrenciesTableRow_CurrenciesTableRow","HomePage","fetchTopCryptocurrencies","isLoading","isRefreshing","Button","disabled","loading","CurrenciesTable_CurrenciesTable_CurrenciesTable","Spinner","color","size","objectSpread"],"mappings":"0FAEAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAO,IAAMA,EAAyB,SAACC,GAAD,OAAsBA,EAAMC,OAAOC,uDCFzEN,EAAAC,EAAAC,EAAA,sBAAAK,IAAAP,EAAAC,EAAAC,EAAA,sBAAAM,IAAAR,EAAAC,EAAAC,EAAA,sBAAAO,IAAA,IAAAC,EAAAV,EAAA,KAAAW,EAAAX,EAAA,KAAAY,EAAAZ,EAAA,KAYaO,EAAiCM,YAC5C,CAP+B,SAACT,GAAD,OAC/BA,EAAMU,SAASC,iBAAiBC,OAEE,SAACZ,GAAD,OAClCA,EAAMU,SAASC,iBAAiBE,IAAID,OAGoBb,KACxD,SAACY,EAAkBG,EAAqBC,GAAxC,OACED,EACGE,IAAI,SAAAC,GAAU,OAAIN,EAAiBM,KACnCC,OAAO,SAAAC,GAAQ,OAAIC,QAAQD,EAASE,MAAMN,QAIpCX,EAAgC,SAACkB,GAAD,OAC3Cb,YACE,CAACa,EAAqBnB,GACtB,SAACoB,EAAkBZ,GAAnB,OACEa,SAASb,GAAkBc,KAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAOJ,OAIvClB,EAAqBI,YAChC,CAACN,GACD,SAAAQ,GAAgB,OACda,SAASb,GAAkBc,KAAK,SAAAC,GAAC,MAAiB,QAAbA,EAAEE,yUCH9BC,UAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAJ,IAAAe,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MAKEQ,YAAc,WAAM,IAAAC,EACqBhB,EAAKiB,MAApCC,EADUF,EACVE,MAAOhD,EADG8C,EACH9C,oBACTe,EAAakC,OAAOC,SAASF,EAAMG,OAAOpC,WAAY,IAE5De,EAAKiB,MAAMK,QAAQC,oBAAoBtC,EAAYf,IATvD8B,EAAA,OAAAC,OAAAuB,EAAA,EAAAvB,CAAAJ,EAAAC,GAAAG,OAAAwB,EAAA,EAAAxB,CAAAJ,EAAA,EAAA6B,IAAA,oBAAAC,MAAA,WAEIxB,KAAKY,gBAFT,CAAAW,IAAA,SAAAC,MAAA,WAYW,IAAAC,EACkDzB,KAAKc,MAAtDY,EADDD,EACCC,eAAgBC,EADjBF,EACiBE,QAAS5D,EAD1B0D,EAC0B1D,oBAEjC,IAAK2D,EACH,OAAOE,EAAA,cAACC,EAAA,EAAD,MAGT,IAAM3C,EAAQwC,EAAexC,MAAMnB,GAC7B+D,GAAS5C,EAAM4C,MAAMC,QAAQ,GAEnC,OACEH,EAAA,qBAAKI,UAAU,6BACbJ,EAAA,wBACEA,EAAA,sBAAMI,UAAU,mCACZN,EAAeO,MAFrB,OAKEL,EAAA,sBAAMI,UAAU,qCAAhB,IACKN,EAAejC,OADpB,MAKFmC,EAAA,qBAAKI,UAAU,oCACbJ,EAAA,yBACEA,EAAA,sCACEF,EAAeQ,SAEnBN,EAAA,yBACEA,EAAA,uCACEE,EAAMK,iBAFV,IAE+BpE,GAE/B6D,EAAA,yBACEA,EAAA,8CACE1C,EAAMkD,UAAUD,iBAFpB,IAEyCpE,GAEzC6D,EAAA,yBACEA,EAAA,4CACE1C,EAAMmD,UAAUF,iBAFpB,IAEyCpE,GAGvC4D,GACAC,EAAA,yBACEA,EAAA,kDACEF,EAAexC,MAAMnB,GAAqB+D,MAAQH,EAAQzC,MAAMnB,GAAqB+D,MAFzF,QAMFF,EAAA,yBACEA,EAAA,2CACE1C,EAAMoD,gBAAgBP,QAAQ,GAFlC,KAIAH,EAAA,yBACEA,EAAA,4CACE1C,EAAMqD,iBAAiBR,QAAQ,GAFnC,KAIAH,EAAA,yBACEA,EAAA,2CACE1C,EAAMsD,gBAAgBT,QAAQ,GAFlC,KAKAH,EAAA,yBACEA,EAAA,kDACEF,EAAee,kBAAkBN,iBAFrC,IAE0DT,EAAejC,QAGzEmC,EAAA,yBACEA,EAAA,8CACEF,EAAegB,YAAYP,iBAF/B,IAEoDT,EAAejC,SAIrEmC,EAAA,qBAAKI,UAAU,yCACbJ,EAAA,cAACe,EAAA,EAAD,CAAQC,GAAG,IAAIC,MAAM,aAArB,WAIAjB,EAAA,cAACe,EAAA,EAAD,CACEE,MAAM,UACNC,QAAU9C,KAAKY,aAFjB,iBAxFVlB,EAAA,CAA+CqD,MAsHhCC,sBAAWC,YAlBE,WAC1B,IAEMC,EAAoBjF,YAFE,SAACkF,EAAmBrC,GAApB,OAC1BE,OAAOC,SAASH,EAAMC,MAAMG,OAAOpC,WAAY,MAGjD,OAAO,SAACjB,EAAkBiD,GAAnB,MAAuF,CAC5FY,eAAgBwB,EAAkBrF,EAAOiD,GACzCa,QAASzD,YAAmBL,GAC5BE,oBAAqBH,YAAuBC,MAIrB,SAACuF,GAAD,MAAyB,CAClDjC,QAAQrB,OAAAuD,EAAA,EAAAvD,CAAA,GACHwD,YAAmBC,EAAyBH,MAIzBH,CAAiDvD,4NC3H9D8D,UAAb,SAAA7D,GAAA,SAAA6D,IAAA,IAAA5D,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwD,GAAA,QAAAvD,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAA0D,IAAA/C,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MAGEqD,qBAAuB,SAACC,GACtB7D,EAAKiB,MAAMK,QAAQwC,mBAAmBD,IAJ1C7D,EAAA,OAAAC,OAAAuB,EAAA,EAAAvB,CAAA0D,EAAA7D,GAAAG,OAAAwB,EAAA,EAAAxB,CAAA0D,EAAA,EAAAjC,IAAA,SAAAC,MAAA,WAOW,IACCzD,EAAwBiC,KAAKc,MAA7B/C,oBAER,OACE6D,EAAA,qBAAKI,UAAU,gBACbJ,EAAA,oCAEAA,EAAA,yCAEAA,EAAA,cAACgC,EAAA,WAAD,CACE5B,UAAU,qCACVC,KAAK,eACL4B,cAAgB9F,EAChB+F,SAAW9D,KAAKyD,sBAEhB7B,EAAA,qBAAKI,UAAU,oCACbJ,EAAA,cAACgC,EAAA,MAAD,CAAOpC,MAAQuC,IAAaC,IAAMxE,GAAKuE,IAAaC,MACpDpC,EAAA,uBAAOqC,QAAUF,IAAaC,KAC5BpC,EAAA,cAACsC,EAAA,EAAD,CAAKC,IAAI,iCADX,QAMFvC,EAAA,qBAAKI,UAAU,oCACbJ,EAAA,cAACgC,EAAA,MAAD,CAAOpC,MAAQuC,IAAaK,IAAM5E,GAAKuE,IAAaK,MACpDxC,EAAA,uBAAOqC,QAAUF,IAAaK,KAC5BxC,EAAA,cAACsC,EAAA,EAAD,CAAKC,IAAI,kCADX,QAMFvC,EAAA,qBAAKI,UAAU,oCACbJ,EAAA,cAACgC,EAAA,MAAD,CAAOpC,MAAQuC,IAAaM,IAAM7E,GAAKuE,IAAaM,MACpDzC,EAAA,uBAAOqC,QAAUF,IAAaM,KAC5BzC,EAAA,cAACsC,EAAA,EAAD,CAAKC,IAAI,yBADX,SAOJvC,EAAA,qBAAKI,UAAU,2BACbJ,EAAA,cAACe,EAAA,EAAD,CAAQC,GAAG,IAAIC,MAAM,aAArB,iBAhDVW,EAAA,CAAkCT,MAArBS,EACJc,aAAe,GAkETrB,sBAVa,SAACpF,GAAD,MAAmC,CAC7DE,oBAAqBH,YAAuBC,KAGnB,SAACuF,GAAD,MAAyB,CAClDjC,QAAQrB,OAAAuD,EAAA,EAAAvD,CAAA,GACHwD,YAAmBiB,EAAenB,MAI1BH,CAAiDO,yLC1EnDgB,UAAb,SAAAC,GAAA,SAAAD,IAAA,IAAA5E,EAAAC,EAAAC,OAAA4E,EAAA,EAAA5E,CAAAE,KAAAwE,GAAA,QAAAvE,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAA6E,EAAA,EAAA7E,CAAAE,MAAAJ,EAAAE,OAAA8E,EAAA,EAAA9E,CAAA0E,IAAA/D,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MACEyE,YAAc,WAAM,IACV7F,EAAaa,EAAKiB,MAAlB9B,SAGRa,EAAKiB,MAAMgE,QAAQC,KAAnB,aAAApE,OAAqC3B,EAASQ,GAA9C,KAAAmB,OAAoD3B,EAASiD,QALjEpC,EAAA,OAAAC,OAAAkF,EAAA,EAAAlF,CAAA0E,EAAAC,GAAA3E,OAAAmF,EAAA,EAAAnF,CAAA0E,EAAA,EAAAjD,IAAA,SAAAC,MAAA,WAQW,IAAAX,EACmCb,KAAKc,MAAvCoE,EADDrE,EACCqE,MAAOlG,EADR6B,EACQ7B,SAAUJ,EADlBiC,EACkBjC,aAEnBkD,EAAQ9C,EAASE,MAAMN,GAAckD,MACxCC,QAAQ,GACRoD,WACAC,QAAQ,MAAO,IAEZ7C,EAAmBvD,EAASE,MAAMN,GAAc2D,iBACnDR,QAAQ,GAEX,OACEsD,EAAA,oBACErD,UAAU,qBACVc,QAAU9C,KAAK6E,YACfS,SAAW,EACXC,KAAK,UAELF,EAAA,oBAAIrD,UAAU,6BACVkD,EAAQ,GAGZG,EAAA,oBAAIrD,UAAU,kCACZqD,EAAA,qBAAKrD,UAAU,8BACXhD,EAASS,SAIf4F,EAAA,wBACEA,EAAA,qBAAKrD,UAAU,6BACXF,EADJ,IACclD,IAIhByG,EAAA,oBAAIrD,UAAU,iCACVO,EADJ,UA1CRiC,EAAA,CAAwCgB,MAkDzBxC,cAAWwB,GCrDLiB,2LAGV,IAAA5E,EAC8Bb,KAAKc,MAAlC4E,EADD7E,EACC6E,WAAY9G,EADbiC,EACajC,aAEpB,OACEyG,EAAA,uBAAOrD,UAAU,mBACfqD,EAAA,2BACEA,EAAA,wBACEA,EAAA,6BACAA,EAAA,kCACAA,EAAA,oBAAIrD,UAAU,gCAAd,SAGAqD,EAAA,oBAAIrD,UAAU,oCAAd,kBAMJqD,EAAA,2BACIK,EACCC,KAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE1D,QAAU2D,EAAE3D,QAAU,GAAK,IAC5CrD,IAAI,SAACG,EAAUkG,GAAX,OACHG,EAAA,cAACS,EAAD,CACEvE,IAAMvC,EAASQ,GACf0F,MAAQA,EACRlG,SAAWA,EACXJ,aAAeA,eA7Bc4G,MAAxBC,EACZnB,aAAe,gDCgBjB,IAAMyB,EAAb,SAAApG,GAAA,SAAAoG,IAAA,IAAAnG,EAAAC,EAAAC,OAAA4E,EAAA,EAAA5E,CAAAE,KAAA+F,GAAA,QAAA9F,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAA6E,EAAA,EAAA7E,CAAAE,MAAAJ,EAAAE,OAAA8E,EAAA,EAAA9E,CAAAiG,IAAAtF,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MAKEQ,YAAc,WAAM,IAAAC,EACuBhB,EAAKiB,MAAtCK,EADUN,EACVM,QAASpD,EADC8C,EACD9C,oBAEjBoD,EAAQ6E,yBAAyBjI,IARrC8B,EAAA,OAAAC,OAAAkF,EAAA,EAAAlF,CAAAiG,EAAApG,GAAAG,OAAAmF,EAAA,EAAAnF,CAAAiG,EAAA,EAAAxE,IAAA,oBAAAC,MAAA,WAEIxB,KAAKY,gBAFT,CAAAW,IAAA,SAAAC,MAAA,WAWW,IAAAC,EAMJzB,KAAKc,MAJNtC,EAFKiD,EAELjD,iBACAT,EAHK0D,EAGL1D,oBACAkI,EAJKxE,EAILwE,UACAC,EALKzE,EAKLyE,aAGF,OACEb,EAAA,qBAAKrD,UAAU,YACbqD,EAAA,oDAEAA,EAAA,qBAAKrD,UAAU,2BACbqD,EAAA,cAACc,EAAA,EAAD,CACEtD,MAAM,UACNC,QAAU9C,KAAKY,YACfwF,SAAWF,EACXG,QAAUH,GAJZ,YAUFb,EAAA,qBAAKrD,UAAU,yBACbqD,EAAA,cAACiB,EAAD,CACEZ,WAAalH,EACbI,aAAeb,IAEfkI,GAAaZ,EAAA,cAACkB,EAAA,EAAD,CACbC,MAAM,UACNC,KAAO,WAzCnBV,EAAA,CAA8BhD,KA8DfE,sBAbS,SAACpF,GAAD,MAAmC,CACzDW,iBAAkBR,YAA+BH,GACjDE,oBAAqBH,YAAuBC,GAC5CoI,UAAWpI,EAAMU,SAASC,iBAAiBE,IAAIuH,UAC/CC,aAAcrI,EAAMU,SAASC,iBAAiBE,IAAIwH,eAGzB,SAAC9C,GAAD,MAAyB,CAClDjC,QAAQrB,OAAA4G,EAAA,EAAA5G,CAAA,GACHwD,YAAmBC,EAAyBH,MAIpCH,CAA6C8C","file":"static/js/homePage.a76b7312.chunk.js","sourcesContent":["import { RootState } from 'state/reducers';\n\nexport const getCurrentFlatCurrency = (state: RootState) => state.global.currentFlatCurrency;\n","import { createSelector } from 'reselect';\nimport * as _ from 'lodash';\n\nimport { getCurrentFlatCurrency } from 'state/global/global.selectors';\nimport { RootState } from 'state/reducers';\n\nconst getReduxCryptocurrencies = (state: RootState) =>\n  state.entities.cryptocurrencies.items;\n\nconst getReduxTopCryptocurrencies = (state: RootState) =>\n  state.entities.cryptocurrencies.top.items;\n\nexport const getTopCryptocurrenciesSelector = createSelector(\n  [getReduxCryptocurrencies, getReduxTopCryptocurrencies, getCurrentFlatCurrency],\n  (cryptocurrencies, topCryptocurrencies, flatCurrency) =>\n    topCryptocurrencies\n      .map(currencyId => cryptocurrencies[currencyId])\n      .filter(currency => Boolean(currency.quote[flatCurrency])),\n);\n\n/* tslint:disable no-any */\nexport const makeGetCryptocurrencySelector = (getCryptocurrencyId: (state: RootState, props: any) => number) =>\n  createSelector(\n    [getCryptocurrencyId, getTopCryptocurrenciesSelector],\n    (cryptocurrencyId, cryptocurrencies) =>\n      _.values(cryptocurrencies).find(e => e.id === cryptocurrencyId),\n  );\n/* tslint:enable no-any */\n\nexport const getBitcoinSelector = createSelector(\n  [getTopCryptocurrenciesSelector],\n  cryptocurrencies =>\n    _.values(cryptocurrencies).find(e => e.symbol === 'BTC'),\n);\n","import * as React from 'react';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { withRouter, RouteComponentProps } from 'react-router';\n\nimport BaseComponent from 'common/BaseComponent';\nimport Button from 'common/Button';\nimport PageLoadingBar from 'common/PageLoadingBar';\nimport * as cryptocurrenciesActions from 'state/entities/cryptocurrencies/cryptocurrencies.actions';\nimport { makeGetCryptocurrencySelector, getBitcoinSelector } from 'state/entities/cryptocurrencies/cryptocurrencies.selectors';\nimport { getCurrentFlatCurrency } from 'state/global/global.selectors';\nimport { RootState } from 'state/reducers';\nimport { Cryptocurrency } from 'types/cryptocurrency.type';\nimport { FlatCurrency } from 'types/flatCurrency.type';\n\nimport './CryptocurrencyDetailsPage.css';\n\ninterface StateProps {\n  cryptocurrency: Cryptocurrency;\n  bitcoin: Cryptocurrency;\n  currentFlatCurrency: FlatCurrency;\n}\n\ninterface DispatchProps {\n  actions: typeof cryptocurrenciesActions;\n}\n\ntype Props = StateProps & DispatchProps & RouteComponentProps<{ currencyId: string }>;\n\nexport class CryptocurrencyDetailsPage extends BaseComponent<Props> {\n  componentDidMount() {\n    this.refreshData();\n  }\n\n  refreshData = () => {\n    const { match, currentFlatCurrency } = this.props;\n    const currencyId = Number.parseInt(match.params.currencyId, 10);\n\n    this.props.actions.fetchCryptocurrency(currencyId, currentFlatCurrency);\n  }\n\n  render() {\n    const { cryptocurrency, bitcoin, currentFlatCurrency } = this.props;\n\n    if (!cryptocurrency) {\n      return <PageLoadingBar />;\n    }\n\n    const quote = cryptocurrency.quote[currentFlatCurrency];\n    const price = +quote.price.toFixed(2);\n\n    return (\n      <div className=\"CryptocurrencyDetailsPage\">\n        <h1>\n          <span className=\"CryptocurrencyDetailsPage__name\">\n            { cryptocurrency.name }\n          </span>\n          &nbsp;\n          <span className=\"CryptocurrencyDetailsPage__symbol\">\n            ({ cryptocurrency.symbol })\n          </span>\n        </h1>\n\n        <div className=\"CryptocurrencyDetailsPage__stats\">\n          <div>\n            <strong>Rank: </strong>\n            { cryptocurrency.cmcRank }\n          </div>\n          <div>\n            <strong>Price: </strong>\n            { price.toLocaleString() } { currentFlatCurrency }\n          </div>\n          <div>\n            <strong>Volume (24h): </strong>\n            { quote.volume24h.toLocaleString() } { currentFlatCurrency }\n          </div>\n          <div>\n            <strong>Market Cap: </strong>\n            { quote.marketCap.toLocaleString() } { currentFlatCurrency }\n          </div>\n\n          { bitcoin &&\n            <div>\n              <strong>Price in Bitcoin: </strong>\n              { cryptocurrency.quote[currentFlatCurrency].price / bitcoin.quote[currentFlatCurrency].price } BTC\n            </div>\n          }\n\n          <div>\n            <strong>1h Change: </strong>\n            { quote.percentChange1h.toFixed(2) }%\n          </div>\n          <div>\n            <strong>24h Change: </strong>\n            { quote.percentChange24h.toFixed(2) }%\n          </div>\n          <div>\n            <strong>7d Change: </strong>\n            { quote.percentChange7d.toFixed(2) }%\n          </div>\n\n          <div>\n            <strong>Available supply: </strong>\n            { cryptocurrency.circulatingSupply.toLocaleString() } { cryptocurrency.symbol }\n          </div>\n\n          <div>\n            <strong>Total Supply: </strong>\n            { cryptocurrency.totalSupply.toLocaleString() } { cryptocurrency.symbol }\n          </div>\n        </div>\n\n        <div className=\"CryptocurrencyDetailsPage__buttonsBar\">\n          <Button to=\"/\" theme=\"secondary\">\n            Go back\n          </Button>\n\n          <Button\n            theme=\"primary\"\n            onClick={ this.refreshData }\n          >\n            Refresh\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst makeMapStateToProps = () => {\n  const getCryptocurrencyId = (_state: RootState, props: Props) =>\n    Number.parseInt(props.match.params.currencyId, 10);\n  const getCryptocurrency = makeGetCryptocurrencySelector(getCryptocurrencyId);\n\n  return (state: RootState, props: RouteComponentProps<{ currencyId: string }>): StateProps => ({\n    cryptocurrency: getCryptocurrency(state, props),\n    bitcoin: getBitcoinSelector(state),\n    currentFlatCurrency: getCurrentFlatCurrency(state),\n  });\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  actions: {\n    ...bindActionCreators(cryptocurrenciesActions, dispatch),\n  },\n});\n\nexport default withRouter(connect(makeMapStateToProps, mapDispatchToProps)(CryptocurrencyDetailsPage));\n","import * as React from 'react';\nimport { Dispatch, bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { RadioGroup, Radio } from 'react-radio-group';\n\nimport BaseComponent from 'common/BaseComponent';\nimport Button from 'common/Button';\nimport Img from 'common/Img';\nimport * as globalActions from 'state/global/global.actions';\nimport { getCurrentFlatCurrency } from 'state/global/global.selectors';\nimport { RootState } from 'state/reducers';\nimport { FlatCurrency } from 'types/flatCurrency.type';\nimport './SettingsPage.css';\n\ninterface StateProps {\n  currentFlatCurrency: FlatCurrency;\n}\n\ninterface DispatchProps {\n  actions: typeof globalActions;\n}\n\ntype Props = StateProps & DispatchProps;\n\nexport class SettingsPage extends BaseComponent<Props> {\n  static defaultProps = {};\n\n  handleCurrencyChange = (newCurrency: FlatCurrency) => {\n    this.props.actions.changeFlatCurrency(newCurrency);\n  }\n\n  render() {\n    const { currentFlatCurrency } = this.props;\n\n    return (\n      <div className=\"SettingsPage\">\n        <h1>Settings</h1>\n\n        <h2>Flat currency</h2>\n\n        <RadioGroup\n          className=\"SettingsPage__flatCurrencyFieldset\"\n          name=\"flatCurrency\"\n          selectedValue={ currentFlatCurrency }\n          onChange={ this.handleCurrencyChange }\n        >\n          <div className=\"SettingsPage__flatCurrencyOption\">\n            <Radio value={ FlatCurrency.USD } id={ FlatCurrency.USD } />\n            <label htmlFor={ FlatCurrency.USD }>\n              <Img src=\"/img/flags/united-states.svg\" />\n              USD\n            </label>\n          </div>\n\n          <div className=\"SettingsPage__flatCurrencyOption\">\n            <Radio value={ FlatCurrency.EUR } id={ FlatCurrency.EUR }/>\n            <label htmlFor={ FlatCurrency.EUR }>\n              <Img src=\"/img/flags/european-union.svg\" />\n              EUR\n            </label>\n          </div>\n\n          <div className=\"SettingsPage__flatCurrencyOption\">\n            <Radio value={ FlatCurrency.CNY } id={ FlatCurrency.CNY }/>\n            <label htmlFor={ FlatCurrency.CNY }>\n              <Img src=\"/img/flags/china.svg\" />\n              CNY\n            </label>\n          </div>\n        </RadioGroup>\n\n        <div className=\"SettingsPage__bottomBar\">\n          <Button to=\"/\" theme=\"secondary\">\n            Go back\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst makeMapStateToProps = (state: RootState): StateProps => ({\n  currentFlatCurrency: getCurrentFlatCurrency(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  actions: {\n    ...bindActionCreators(globalActions, dispatch),\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(SettingsPage);\n","import * as React from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router';\n\nimport PureBaseComponent from 'common/PureBaseComponent';\nimport { Cryptocurrency } from 'types/cryptocurrency.type';\nimport { FlatCurrency } from 'types/flatCurrency.type';\n\nimport './CurrenciesTableRow.css';\n\ninterface OwnProps {\n  index: number;\n  currency: Cryptocurrency;\n  flatCurrency: FlatCurrency;\n}\n\ntype Props = OwnProps & RouteComponentProps;\n\nexport class CurrenciesTableRow extends PureBaseComponent<Props> {\n  handleClick = () => {\n    const { currency } = this.props;\n\n    // NOTE: We're not using <Link> to keep semantic table layout with <tr>\n    this.props.history.push(`/currency/${currency.id}/${currency.name}`);\n  }\n\n  render() {\n    const { index, currency, flatCurrency } = this.props;\n\n    const price = currency.quote[flatCurrency].price\n      .toFixed(4)\n      .toString()\n      .replace(/0+$/, '');\n\n    const percentChange24h = currency.quote[flatCurrency].percentChange24h\n      .toFixed(2);\n\n    return (\n      <tr\n        className=\"CurrenciesTableRow\"\n        onClick={ this.handleClick }\n        tabIndex={ 0 }\n        role=\"button\"\n      >\n        <td className=\"CurrenciesTableRow__index\">\n          { index + 1 }\n        </td>\n\n        <td className=\"CurrenciesTableRow__symbolCell\">\n          <div className=\"CurrenciesTableRow__symbol\">\n            { currency.symbol }\n          </div>\n        </td>\n\n        <td>\n          <div className=\"CurrenciesTableRow__price\">\n            { price } { flatCurrency }\n          </div>\n        </td>\n\n        <td className=\"CurrenciesTableRow__change24h\">\n          { percentChange24h }%\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default withRouter(CurrenciesTableRow);\n","import * as React from 'react';\n\nimport PureBaseComponent from 'common/PureBaseComponent';\nimport { Cryptocurrency } from 'types/cryptocurrency.type';\nimport { FlatCurrency } from 'types/flatCurrency.type';\n\nimport CurrenciesTableRow from './CurrenciesTableRow';\nimport './CurrenciesTable.css';\n\ninterface Props {\n  currencies: Cryptocurrency[];\n  flatCurrency: FlatCurrency;\n}\n\nexport default class CurrenciesTable extends PureBaseComponent<Props> {\n  static defaultProps = {};\n\n  render() {\n    const { currencies, flatCurrency } = this.props;\n\n    return (\n      <table className=\"CurrenciesTable\">\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>Symbol</th>\n            <th className=\"CurrenciesTable__priceHeader\">\n              Price\n            </th>\n            <th className=\"CurrenciesTable__change24hHeader\">\n              Change (24h)\n            </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          { currencies\n            .sort((a, b) => a.cmcRank > b.cmcRank ? 1 : -1)\n            .map((currency, index) =>\n              <CurrenciesTableRow\n                key={ currency.id }\n                index={ index }\n                currency={ currency }\n                flatCurrency={ flatCurrency }\n              />,\n          ) }\n        </tbody>\n      </table>\n    );\n  }\n}\n","import * as React from 'react';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport * as _ from 'lodash';\n\nimport BaseComponent from 'common/BaseComponent';\nimport Button from 'common/Button';\nimport Spinner from 'common/Spinner';\nimport * as cryptocurrenciesActions from 'state/entities/cryptocurrencies/cryptocurrencies.actions';\nimport { getTopCryptocurrenciesSelector } from 'state/entities/cryptocurrencies/cryptocurrencies.selectors';\nimport { getCurrentFlatCurrency } from 'state/global/global.selectors';\nimport { RootState } from 'state/reducers';\nimport { Cryptocurrency } from 'types/cryptocurrency.type';\nimport { FlatCurrency } from 'types/flatCurrency.type';\n\nimport CurrenciesTable from './CurrenciesTable';\nimport './HomePage.css';\n\ninterface StateProps {\n  cryptocurrencies: Cryptocurrency[];\n  currentFlatCurrency: FlatCurrency;\n  isLoading: boolean;\n  isRefreshing: boolean;\n}\n\ninterface DispatchProps {\n  actions: typeof cryptocurrenciesActions;\n}\n\ntype Props = StateProps & DispatchProps;\n\nexport class HomePage extends BaseComponent<Props> {\n  componentDidMount() {\n    this.refreshData();\n  }\n\n  refreshData = () => {\n    const { actions, currentFlatCurrency } = this.props;\n\n    actions.fetchTopCryptocurrencies(currentFlatCurrency);\n  }\n\n  render() {\n    const {\n      cryptocurrencies,\n      currentFlatCurrency,\n      isLoading,\n      isRefreshing,\n   } = this.props;\n\n    return (\n      <div className=\"HomePage\">\n        <h1>Top 100 Cryptocurrencies</h1>\n\n        <div className=\"HomePage__refreshButton\">\n          <Button\n            theme=\"primary\"\n            onClick={ this.refreshData }\n            disabled={ isRefreshing }\n            loading={ isRefreshing }\n          >\n            Refresh\n          </Button>\n        </div>\n\n        <div className=\"HomePage__mainContent\">\n          <CurrenciesTable\n            currencies={ cryptocurrencies }\n            flatCurrency={ currentFlatCurrency }\n          />\n          { isLoading && <Spinner\n            color=\"#1200FF\"\n            size={ 20 }\n          /> }\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  cryptocurrencies: getTopCryptocurrenciesSelector(state),\n  currentFlatCurrency: getCurrentFlatCurrency(state),\n  isLoading: state.entities.cryptocurrencies.top.isLoading,\n  isRefreshing: state.entities.cryptocurrencies.top.isRefreshing,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  actions: {\n    ...bindActionCreators(cryptocurrenciesActions, dispatch),\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\n"],"sourceRoot":""}